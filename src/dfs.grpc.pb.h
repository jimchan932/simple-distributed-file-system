// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dfs.proto
#ifndef GRPC_dfs_2eproto__INCLUDED
#define GRPC_dfs_2eproto__INCLUDED

#include "dfs.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace dfs {

// Interface exported by server
class DFS final {
 public:
  static constexpr char const* service_full_name() {
    return "dfs.DFS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status connectServer(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::dfs::ClientID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::ClientID>> AsyncconnectServer(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::ClientID>>(AsyncconnectServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::ClientID>> PrepareAsyncconnectServer(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::ClientID>>(PrepareAsyncconnectServerRaw(context, request, cq));
    }
    // check if valid    
    virtual ::grpc::Status pullInvalidation(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::dfs::Invalidation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Invalidation>> AsyncpullInvalidation(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Invalidation>>(AsyncpullInvalidationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Invalidation>> PrepareAsyncpullInvalidation(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Invalidation>>(PrepareAsyncpullInvalidationRaw(context, request, cq));
    }
    // read file add it cache and acquire lock set valid
    virtual ::grpc::Status readFile(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::dfs::FileHandle* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>> AsyncreadFile(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>>(AsyncreadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>> PrepareAsyncreadFile(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>>(PrepareAsyncreadFileRaw(context, request, cq));
    }
    // read lock
    virtual ::grpc::Status acquireReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::dfs::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> AsyncacquireReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(AsyncacquireReadLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> PrepareAsyncacquireReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(PrepareAsyncacquireReadLockRaw(context, request, cq));
    }
    virtual ::grpc::Status releaseReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::dfs::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> AsyncreleaseReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(AsyncreleaseReadLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> PrepareAsyncreleaseReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(PrepareAsyncreleaseReadLockRaw(context, request, cq));
    }
    // get write lock and file data set valid, set others invalid
    virtual ::grpc::Status getFileDataToWrite(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::dfs::FileHandle* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>> AsyncgetFileDataToWrite(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>>(AsyncgetFileDataToWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>> PrepareAsyncgetFileDataToWrite(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>>(PrepareAsyncgetFileDataToWriteRaw(context, request, cq));
    }
    // get write lock and set valid other invalid
    virtual ::grpc::Status acquireWriteLock(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::dfs::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> AsyncacquireWriteLock(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(AsyncacquireWriteLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> PrepareAsyncacquireWriteLock(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(PrepareAsyncacquireWriteLockRaw(context, request, cq));
    }
    // write into cache and server
    virtual ::grpc::Status writeFileAndReleaseLock(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::dfs::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> AsyncwriteFileAndReleaseLock(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(AsyncwriteFileAndReleaseLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> PrepareAsyncwriteFileAndReleaseLock(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(PrepareAsyncwriteFileAndReleaseLockRaw(context, request, cq));
    }
    virtual ::grpc::Status createFile(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::dfs::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> AsynccreateFile(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(AsynccreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> PrepareAsynccreateFile(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(PrepareAsynccreateFileRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteFile(::grpc::ClientContext* context, const ::dfs::Filename& request, ::dfs::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> AsyncdeleteFile(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(AsyncdeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>> PrepareAsyncdeleteFile(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>>(PrepareAsyncdeleteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status list(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::dfs::FileList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileList>> Asynclist(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileList>>(AsynclistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileList>> PrepareAsynclist(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileList>>(PrepareAsynclistRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::ClientID>* AsyncconnectServerRaw(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::ClientID>* PrepareAsyncconnectServerRaw(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Invalidation>* AsyncpullInvalidationRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Invalidation>* PrepareAsyncpullInvalidationRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>* AsyncreadFileRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>* PrepareAsyncreadFileRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* AsyncacquireReadLockRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* PrepareAsyncacquireReadLockRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* AsyncreleaseReadLockRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* PrepareAsyncreleaseReadLockRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>* AsyncgetFileDataToWriteRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileHandle>* PrepareAsyncgetFileDataToWriteRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* AsyncacquireWriteLockRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* PrepareAsyncacquireWriteLockRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* AsyncwriteFileAndReleaseLockRaw(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* PrepareAsyncwriteFileAndReleaseLockRaw(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* AsynccreateFileRaw(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* PrepareAsynccreateFileRaw(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* AsyncdeleteFileRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::Response>* PrepareAsyncdeleteFileRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileList>* AsynclistRaw(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs::FileList>* PrepareAsynclistRaw(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status connectServer(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::dfs::ClientID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::ClientID>> AsyncconnectServer(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::ClientID>>(AsyncconnectServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::ClientID>> PrepareAsyncconnectServer(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::ClientID>>(PrepareAsyncconnectServerRaw(context, request, cq));
    }
    ::grpc::Status pullInvalidation(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::dfs::Invalidation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Invalidation>> AsyncpullInvalidation(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Invalidation>>(AsyncpullInvalidationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Invalidation>> PrepareAsyncpullInvalidation(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Invalidation>>(PrepareAsyncpullInvalidationRaw(context, request, cq));
    }
    ::grpc::Status readFile(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::dfs::FileHandle* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>> AsyncreadFile(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>>(AsyncreadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>> PrepareAsyncreadFile(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>>(PrepareAsyncreadFileRaw(context, request, cq));
    }
    ::grpc::Status acquireReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::dfs::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> AsyncacquireReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(AsyncacquireReadLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> PrepareAsyncacquireReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(PrepareAsyncacquireReadLockRaw(context, request, cq));
    }
    ::grpc::Status releaseReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::dfs::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> AsyncreleaseReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(AsyncreleaseReadLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> PrepareAsyncreleaseReadLock(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(PrepareAsyncreleaseReadLockRaw(context, request, cq));
    }
    ::grpc::Status getFileDataToWrite(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::dfs::FileHandle* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>> AsyncgetFileDataToWrite(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>>(AsyncgetFileDataToWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>> PrepareAsyncgetFileDataToWrite(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>>(PrepareAsyncgetFileDataToWriteRaw(context, request, cq));
    }
    ::grpc::Status acquireWriteLock(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::dfs::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> AsyncacquireWriteLock(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(AsyncacquireWriteLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> PrepareAsyncacquireWriteLock(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(PrepareAsyncacquireWriteLockRaw(context, request, cq));
    }
    ::grpc::Status writeFileAndReleaseLock(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::dfs::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> AsyncwriteFileAndReleaseLock(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(AsyncwriteFileAndReleaseLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> PrepareAsyncwriteFileAndReleaseLock(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(PrepareAsyncwriteFileAndReleaseLockRaw(context, request, cq));
    }
    ::grpc::Status createFile(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::dfs::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> AsynccreateFile(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(AsynccreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> PrepareAsynccreateFile(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(PrepareAsynccreateFileRaw(context, request, cq));
    }
    ::grpc::Status deleteFile(::grpc::ClientContext* context, const ::dfs::Filename& request, ::dfs::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> AsyncdeleteFile(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(AsyncdeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>> PrepareAsyncdeleteFile(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::Response>>(PrepareAsyncdeleteFileRaw(context, request, cq));
    }
    ::grpc::Status list(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::dfs::FileList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileList>> Asynclist(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileList>>(AsynclistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileList>> PrepareAsynclist(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs::FileList>>(PrepareAsynclistRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::dfs::ClientID>* AsyncconnectServerRaw(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::ClientID>* PrepareAsyncconnectServerRaw(::grpc::ClientContext* context, const ::dfs::ClientAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Invalidation>* AsyncpullInvalidationRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Invalidation>* PrepareAsyncpullInvalidationRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>* AsyncreadFileRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>* PrepareAsyncreadFileRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* AsyncacquireReadLockRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* PrepareAsyncacquireReadLockRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* AsyncreleaseReadLockRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* PrepareAsyncreleaseReadLockRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>* AsyncgetFileDataToWriteRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::FileHandle>* PrepareAsyncgetFileDataToWriteRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* AsyncacquireWriteLockRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* PrepareAsyncacquireWriteLockRaw(::grpc::ClientContext* context, const ::dfs::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* AsyncwriteFileAndReleaseLockRaw(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* PrepareAsyncwriteFileAndReleaseLockRaw(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* AsynccreateFileRaw(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* PrepareAsynccreateFileRaw(::grpc::ClientContext* context, const ::dfs::FileHandle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* AsyncdeleteFileRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::Response>* PrepareAsyncdeleteFileRaw(::grpc::ClientContext* context, const ::dfs::Filename& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::FileList>* AsynclistRaw(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs::FileList>* PrepareAsynclistRaw(::grpc::ClientContext* context, const ::dfs::DirectoryPath& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_connectServer_;
    const ::grpc::internal::RpcMethod rpcmethod_pullInvalidation_;
    const ::grpc::internal::RpcMethod rpcmethod_readFile_;
    const ::grpc::internal::RpcMethod rpcmethod_acquireReadLock_;
    const ::grpc::internal::RpcMethod rpcmethod_releaseReadLock_;
    const ::grpc::internal::RpcMethod rpcmethod_getFileDataToWrite_;
    const ::grpc::internal::RpcMethod rpcmethod_acquireWriteLock_;
    const ::grpc::internal::RpcMethod rpcmethod_writeFileAndReleaseLock_;
    const ::grpc::internal::RpcMethod rpcmethod_createFile_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_list_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status connectServer(::grpc::ServerContext* context, const ::dfs::ClientAddress* request, ::dfs::ClientID* response);
    // check if valid    
    virtual ::grpc::Status pullInvalidation(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::Invalidation* response);
    // read file add it cache and acquire lock set valid
    virtual ::grpc::Status readFile(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::FileHandle* response);
    // read lock
    virtual ::grpc::Status acquireReadLock(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response);
    virtual ::grpc::Status releaseReadLock(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response);
    // get write lock and file data set valid, set others invalid
    virtual ::grpc::Status getFileDataToWrite(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::FileHandle* response);
    // get write lock and set valid other invalid
    virtual ::grpc::Status acquireWriteLock(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::Response* response);
    // write into cache and server
    virtual ::grpc::Status writeFileAndReleaseLock(::grpc::ServerContext* context, const ::dfs::FileHandle* request, ::dfs::Response* response);
    virtual ::grpc::Status createFile(::grpc::ServerContext* context, const ::dfs::FileHandle* request, ::dfs::Response* response);
    virtual ::grpc::Status deleteFile(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response);
    virtual ::grpc::Status list(::grpc::ServerContext* context, const ::dfs::DirectoryPath* request, ::dfs::FileList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_connectServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_connectServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_connectServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connectServer(::grpc::ServerContext* context, const ::dfs::ClientAddress* request, ::dfs::ClientID* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestconnectServer(::grpc::ServerContext* context, ::dfs::ClientAddress* request, ::grpc::ServerAsyncResponseWriter< ::dfs::ClientID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_pullInvalidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_pullInvalidation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_pullInvalidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pullInvalidation(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::Invalidation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpullInvalidation(::grpc::ServerContext* context, ::dfs::FileRequest* request, ::grpc::ServerAsyncResponseWriter< ::dfs::Invalidation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_readFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_readFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::FileHandle* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadFile(::grpc::ServerContext* context, ::dfs::FileRequest* request, ::grpc::ServerAsyncResponseWriter< ::dfs::FileHandle>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_acquireReadLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_acquireReadLock() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_acquireReadLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acquireReadLock(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestacquireReadLock(::grpc::ServerContext* context, ::dfs::Filename* request, ::grpc::ServerAsyncResponseWriter< ::dfs::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_releaseReadLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_releaseReadLock() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_releaseReadLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status releaseReadLock(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreleaseReadLock(::grpc::ServerContext* context, ::dfs::Filename* request, ::grpc::ServerAsyncResponseWriter< ::dfs::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getFileDataToWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getFileDataToWrite() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getFileDataToWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileDataToWrite(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::FileHandle* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFileDataToWrite(::grpc::ServerContext* context, ::dfs::FileRequest* request, ::grpc::ServerAsyncResponseWriter< ::dfs::FileHandle>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_acquireWriteLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_acquireWriteLock() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_acquireWriteLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acquireWriteLock(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestacquireWriteLock(::grpc::ServerContext* context, ::dfs::FileRequest* request, ::grpc::ServerAsyncResponseWriter< ::dfs::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_writeFileAndReleaseLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_writeFileAndReleaseLock() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_writeFileAndReleaseLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFileAndReleaseLock(::grpc::ServerContext* context, const ::dfs::FileHandle* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwriteFileAndReleaseLock(::grpc::ServerContext* context, ::dfs::FileHandle* request, ::grpc::ServerAsyncResponseWriter< ::dfs::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_createFile() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_createFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createFile(::grpc::ServerContext* context, const ::dfs::FileHandle* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateFile(::grpc::ServerContext* context, ::dfs::FileHandle* request, ::grpc::ServerAsyncResponseWriter< ::dfs::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_deleteFile() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteFile(::grpc::ServerContext* context, ::dfs::Filename* request, ::grpc::ServerAsyncResponseWriter< ::dfs::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_list() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list(::grpc::ServerContext* context, const ::dfs::DirectoryPath* request, ::dfs::FileList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist(::grpc::ServerContext* context, ::dfs::DirectoryPath* request, ::grpc::ServerAsyncResponseWriter< ::dfs::FileList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_connectServer<WithAsyncMethod_pullInvalidation<WithAsyncMethod_readFile<WithAsyncMethod_acquireReadLock<WithAsyncMethod_releaseReadLock<WithAsyncMethod_getFileDataToWrite<WithAsyncMethod_acquireWriteLock<WithAsyncMethod_writeFileAndReleaseLock<WithAsyncMethod_createFile<WithAsyncMethod_deleteFile<WithAsyncMethod_list<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_connectServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_connectServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_connectServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connectServer(::grpc::ServerContext* context, const ::dfs::ClientAddress* request, ::dfs::ClientID* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_pullInvalidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_pullInvalidation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_pullInvalidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pullInvalidation(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::Invalidation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_readFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_readFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::FileHandle* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_acquireReadLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_acquireReadLock() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_acquireReadLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acquireReadLock(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_releaseReadLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_releaseReadLock() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_releaseReadLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status releaseReadLock(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getFileDataToWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getFileDataToWrite() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getFileDataToWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileDataToWrite(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::FileHandle* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_acquireWriteLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_acquireWriteLock() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_acquireWriteLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acquireWriteLock(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_writeFileAndReleaseLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_writeFileAndReleaseLock() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_writeFileAndReleaseLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFileAndReleaseLock(::grpc::ServerContext* context, const ::dfs::FileHandle* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_createFile() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_createFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createFile(::grpc::ServerContext* context, const ::dfs::FileHandle* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_deleteFile() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_list() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list(::grpc::ServerContext* context, const ::dfs::DirectoryPath* request, ::dfs::FileList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_connectServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_connectServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::ClientAddress, ::dfs::ClientID>(std::bind(&WithStreamedUnaryMethod_connectServer<BaseClass>::StreamedconnectServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_connectServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status connectServer(::grpc::ServerContext* context, const ::dfs::ClientAddress* request, ::dfs::ClientID* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedconnectServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::ClientAddress,::dfs::ClientID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pullInvalidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_pullInvalidation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::FileRequest, ::dfs::Invalidation>(std::bind(&WithStreamedUnaryMethod_pullInvalidation<BaseClass>::StreamedpullInvalidation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_pullInvalidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pullInvalidation(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::Invalidation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpullInvalidation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::FileRequest,::dfs::Invalidation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_readFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::FileRequest, ::dfs::FileHandle>(std::bind(&WithStreamedUnaryMethod_readFile<BaseClass>::StreamedreadFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_readFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readFile(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::FileHandle* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::FileRequest,::dfs::FileHandle>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_acquireReadLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_acquireReadLock() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::Filename, ::dfs::Response>(std::bind(&WithStreamedUnaryMethod_acquireReadLock<BaseClass>::StreamedacquireReadLock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_acquireReadLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status acquireReadLock(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedacquireReadLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::Filename,::dfs::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_releaseReadLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_releaseReadLock() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::Filename, ::dfs::Response>(std::bind(&WithStreamedUnaryMethod_releaseReadLock<BaseClass>::StreamedreleaseReadLock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_releaseReadLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status releaseReadLock(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreleaseReadLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::Filename,::dfs::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getFileDataToWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getFileDataToWrite() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::FileRequest, ::dfs::FileHandle>(std::bind(&WithStreamedUnaryMethod_getFileDataToWrite<BaseClass>::StreamedgetFileDataToWrite, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getFileDataToWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getFileDataToWrite(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::FileHandle* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetFileDataToWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::FileRequest,::dfs::FileHandle>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_acquireWriteLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_acquireWriteLock() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::FileRequest, ::dfs::Response>(std::bind(&WithStreamedUnaryMethod_acquireWriteLock<BaseClass>::StreamedacquireWriteLock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_acquireWriteLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status acquireWriteLock(::grpc::ServerContext* context, const ::dfs::FileRequest* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedacquireWriteLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::FileRequest,::dfs::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_writeFileAndReleaseLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_writeFileAndReleaseLock() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::FileHandle, ::dfs::Response>(std::bind(&WithStreamedUnaryMethod_writeFileAndReleaseLock<BaseClass>::StreamedwriteFileAndReleaseLock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_writeFileAndReleaseLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status writeFileAndReleaseLock(::grpc::ServerContext* context, const ::dfs::FileHandle* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedwriteFileAndReleaseLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::FileHandle,::dfs::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_createFile() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::FileHandle, ::dfs::Response>(std::bind(&WithStreamedUnaryMethod_createFile<BaseClass>::StreamedcreateFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_createFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createFile(::grpc::ServerContext* context, const ::dfs::FileHandle* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::FileHandle,::dfs::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_deleteFile() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::Filename, ::dfs::Response>(std::bind(&WithStreamedUnaryMethod_deleteFile<BaseClass>::StreameddeleteFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* context, const ::dfs::Filename* request, ::dfs::Response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::Filename,::dfs::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_list() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs::DirectoryPath, ::dfs::FileList>(std::bind(&WithStreamedUnaryMethod_list<BaseClass>::Streamedlist, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_list() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list(::grpc::ServerContext* context, const ::dfs::DirectoryPath* request, ::dfs::FileList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs::DirectoryPath,::dfs::FileList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_connectServer<WithStreamedUnaryMethod_pullInvalidation<WithStreamedUnaryMethod_readFile<WithStreamedUnaryMethod_acquireReadLock<WithStreamedUnaryMethod_releaseReadLock<WithStreamedUnaryMethod_getFileDataToWrite<WithStreamedUnaryMethod_acquireWriteLock<WithStreamedUnaryMethod_writeFileAndReleaseLock<WithStreamedUnaryMethod_createFile<WithStreamedUnaryMethod_deleteFile<WithStreamedUnaryMethod_list<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_connectServer<WithStreamedUnaryMethod_pullInvalidation<WithStreamedUnaryMethod_readFile<WithStreamedUnaryMethod_acquireReadLock<WithStreamedUnaryMethod_releaseReadLock<WithStreamedUnaryMethod_getFileDataToWrite<WithStreamedUnaryMethod_acquireWriteLock<WithStreamedUnaryMethod_writeFileAndReleaseLock<WithStreamedUnaryMethod_createFile<WithStreamedUnaryMethod_deleteFile<WithStreamedUnaryMethod_list<Service > > > > > > > > > > > StreamedService;
};

}  // namespace dfs


#endif  // GRPC_dfs_2eproto__INCLUDED
